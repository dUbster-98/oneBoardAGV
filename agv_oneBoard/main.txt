//*********************************************************************************************
//
// Proprietary and Confidential Information
//
// Copyright (c) 2022 by Canon Korea. All Rights Reserved.
//
// This source code and the algorithms implemented therein constitute
// confidential information and may compromise trade secretes of Canon Korea.
// or its associates, and any unaythorized use thereof is prohibited.
//
//*******************************************************************************************//

//*******************************************************************************************//
//
// File Name:main.h
//
// Date: 2022-06-24
//
// Auther : Shin jin-ho
//
// Description: FA-DUINO-32TA Board Base AGV Development 
//
//*******************************************************************************************//

/*********************************************************************************************
* 1. INCLUDES
*********************************************************************************************/

/*********************************************************************************************
* -. Internal Definition
*********************************************************************************************/

/*********************************************************************************************
* 2. GLOBAL VALUE
*********************************************************************************************/
// ckr_jhshin_220701[BoadRate Setting]
#define BOADRATE_9600 9600
#define BOADRATE_19200	19200
#define BOADRATE_38400	38400
#define BOADRATE_57600	57600
#define BOADRATE_115200	115200

#ifdef NEVER  // ckr_jhshin_220705[temp]
#define LCD_GO		1
#define LCD_STOP	2
#define LCD_UP		1
#define LCD_DOWN	2
#define LCD_RIGHT	1
#define LCD_LEFT	2
#endif /* NEVER */

#define E100		1	 // ckr_jhshin_220704[PIN Error]
#define E200		2	 // ckr_jhshin_220704[RFID Received Module Error]
#define E300		3	 // ckr_jhshin_220704[Bottom Sensor Error]
#define E400		4	 // ckr_jhshin_220704[XBEE Module Error]
#define E500		5	 // ckr_jhshin_220704[Motor Error]

#define EEPROM_ADDR_RFIDTOP		0
#define EEPROM_ADDR_LEFTY		1
#define EEPROM_ADDR_RIGHTY		2

#define R_NG		0
#define R_OK		1
#define R_NONE		99

#define DIR_LEFTY			0
#define DIR_RIGHTY			1

#define LEFT_MOTOR_PIN		11
#define RIGHT_MOTOR_PIN		12
#define MOTOR_TABLE_LENGTH	8
#define MOTOR_TABLE_TYPE	3

#define MOT_TBL_CEN_IDX		5
#define MOT_TBL_LEFT_IDX	7
#define MOT_TBL_RIGHT_IDX	8

// LCD SETTING VALUE
#define RFID_TAG_L_TURN		101
#define RFID_TAG_R_TURN		102
#define RFID_TAG_STOP		103
#define RFID_TAG_PINDN_GO	104
#define RFID_TAG_PINUP_GO	105
#define RFID_TAG_SPEEDUP	106
#define RFID_TAG_SPEEDDN	107
#define RFID_TAG_LEFTY		111
#define RFID_TAG_RIGHTY		112
#define RFID_TAG_START		201


volatile unsigned char CH2_RXBUFF;  // RFID Receive Buffer

/*********************************************************************************************
* 3. INLINE FUNCTION
*********************************************************************************************/

/*********************************************************************************************
* 4. STRUCT
*********************************************************************************************/
// status info
typedef enum{
    AGV_OFF_STATE=0,
    AGV_INIT_STATE,
    AGV_IDLE_STATE,
    AGV_ERROR_STATE,
    AGV_STATUS_LAST
} AGV_STATUS;

typedef enum{
    AGV_REQ_NONE=0,
    AGV_REQ_MOVE,
    AGV_REQ_STOP,
    AGV_REQ_PIN,
    AGV_REQ_TEST,
    AGV_REQ_LAST
} AGV_REQ;

typedef enum{
	LCD_ADDR_DRIVE=0,
	LCD_ADDR_PIN,
	LCD_ADDR_RFID,
	LCD_ADDR_AGVTOP,
	LCD_ADDR_LEFTY,
	LCD_ADDR_RIGHTY,
	LCD_ADDR_LAST
} LCD_DISP_ADDR;

typedef struct AGV_STSTUS_STRUCT {
    AGV_STATUS currStatus;
}STATUS_INFO;

typedef struct AGV_REQUEST_STRUCT{
    AGV_REQ currReq;
}REQUEST_INFO;

// AGV Struct Info
typedef struct {
    char MY_AGV_NUM;    // my AGV Number
    bool MOTOR_SPEED;   // normal mode = false, high speed = true;
    int BOTTOM_LINE_SEN;    // Bottom Sensor Data in
    bool start_btn_flag;
	bool direction_info;
    unsigned char rf_buf[7];	// ckr_jhshin_220704[RFID Receive Buffer]
	int top_rfid_number;		 // ckr_jhshin_220704[TOP_RFID Value- AGV Number]
	int lefty_tag_number;		 // ckr_jhshin_220704[lefty tag number]
	int righty_tag_number;		 // ckr_jhshin_220704[righty_tag_number]
    STATUS_INFO status;
    REQUEST_INFO request;
	MOTOR_DES mot_des;
} AGV_CB;

typedef struct AGV_MOTOR_STRUCT {
	int LEFT_MOTOR_SPEED;
	int LEFT_MOT_SET_DRIVE;
	int LEFT_MOT_BREAK;
	int LEFT_MOT_DIR;
	
	int RIGHT_MOTOR_SPEED;
	int RIGHT_MOT_SET_DRIVE;
	int RIGHT_MOT_BREAK;
	int RIGHT_MOT_DIR;
}MOTOR_DES;

typedef enum {
    RFID_STOP=0,
    RFID_START,
    RFID_LEFTSIDE,
    RFID_RIGHTSIDE,
    RFID_TURN_LEFT,
    RFID_TURN_RIGHT,
    RFID_PINUP,
    RFID_PINDOWN
}RFID_NUMBER;

typedef struct {
	  unsigned char rfid_buf[7];    // RFID Buffer
	  int send_data;				// ckr_jhshin_220704[send_data]
} RFID_DATA;

typedef struct {
	uint16_t uiTranslateData[16]; // UI transmit Data
} SET_LCD_DATA;

typedef struct {
	uint16_t uiTranslateData[16]; // UI transmit Data
} GET_LCD_DATA;

typedef struct {
  uint8_t ptTranslateData[10];  // Photo Sensor transmit Data
}PHOTO_SEN;


#ifdef NEVER
int Mot_Descript_Lefty[MOTOR_TABLE_TYPE][MOTOR_TABLE_LENGTH] = 
{
	{ 0x03C0, 0x0780, 0x0F00, 0x01E0, 0x01F0, 0, 	  0, 	  0 },	 	 // ckr_jhshin_220704[STRAIGHT : 5EA]
	{ 0x1E00, 0x3C00, 0x7800, 0xF000, 0xE000, 0xC000, 0x8000, 0 },	 	 // ckr_jhshin_220704[LEFTY : 7EA]
	{ 0x00FC, 0x007E, 0x003F, 0x001F, 0x000F, 0x0007, 0x0003, 0x0001 }	 // ckr_jhshin_220704[RIGHTY : 8EA]
};

int Mot_Descript_Righty[MOTOR_TABLE_TYPE][MOTOR_TABLE_LENGTH] = 
{
	{ 0x03C0, 0x0780, 0x0F00, 0x01E0, 0x01F0, 0, 	  0, 	  0 },	 	 // ckr_jhshin_220704[STRAIGHT : 5EA]
	{ 0x1E00, 0x3C00, 0x7800, 0xF000, 0xE000, 0xC000, 0x8000, 0 },	 	 // ckr_jhshin_220704[LEFTY : 7EA]
	{ 0x00FC, 0x007E, 0x003F, 0x001F, 0x000F, 0x0007, 0x0003, 0x0001 }	 // ckr_jhshin_220704[RIGHTY : 8EA]
};
#endif /* NEVER */

int Mot_Descript_Lefty[3][21] = 
{
	{0x0000,0x0001,0x0003,0x0007,0x000F,0x001E,0x003C,0x0078,0x00F0,0x01E0,0x03C0,0x0780,0x0F00,0x1E00,0x3C00,0x7800,0xF000,0xE000,0xC000,0x8000,0x0000},
	{90,90,90,60,60,60,50,50,50,50,50,50,50,50,50,50,50,50,40,40,40},	// left side accel
	{40,40,40,50,50,50,50,50,50,50,50,60,60,60,60,60,60,60,90,90,90}	// right side accel
};

int Mot_Descript_Righty[3][21] = 
{
	{0x0000,0x0001,0x0003,0x0007,0x000F,0x001E,0x003C,0x0078,0x00F0,0x01E0,0x03C0,0x0780,0x0F00,0x1E00,0x3C00,0x7800,0xF000,0xE000,0xC000,0x8000,0x0000},
	{90,90,90,60,60,60,60,60,60,60,50,50,50,50,50,50,50,50,50,50,50},	// left side accel
	{40,40,40,50,50,50,50,50,50,50,50,50,50,50,50,60,60,60,60,60,60}	// right side accel
};

int MOT_LEFTY_2[3][13] = 
{
	{0x1F3F,0x0F3F,0x273F,0x333F,0x393F,0x3C3F,0x3E1F,0x3F0F,0x3F27,0x3F33,0x3F39,0x3F3C,0x3F3E},
	{50,50,50,50,50,50,50,50,50,60,60,60,60},
	{60,60,60,60,60,50,50,50,50,50,50,50,50}
};
int MOT_LEFTY_3[3][14] = 
{
	{0x1F3F,0x0F3F,0x073F,0x233F,0x313F,0x383F,0x3C1F,0x3E0F,0x3F07,0x3F23,0x3F31,0x3F38,0x3F3C,0x3F3E},
	{50,50,50,50,50,50,50,50,50,50,60,60,60,60},
	{60,60,60,60,60,60,50,50,50,50,50,50,50,50}
}
int MOT_RIGHTY_2[3][13] = 
{
	{0x3F3E,0x3F3E,0x3F3C,0x3F39,0x3F33,0x3F27,0x3E1F,0x3C0F,0x390F,0x333F,0x273F,0x0F3F,0x1F3F},
	{60,60,60,60,60,50,50,50,50,50,50,50,50},
	{50,50,50,50,50,50,50,50,50,50,60,60,60}
};
int MOT_RIGHTY_3[3][14] = 
{
	{0x3F3E,0x3F3C,0x3F3C,0x3F38,0x3F31,0x3F23,0x3E07,0x3C1F,0x380F,0x310F,0x233F,0x073F,0x0F3F,0x1F3F},
	{60,60,60,60,60,60,50,50,50,50,50,50,50,50},
	{50,50,50,50,50,50,50,50,50,50,50,60,60,60}
}

100000000000 0x800
010000000000 0x400
001000000000 0x200
000100000000 0x100
000010000000 0x80
000001000000 0x40
000000100000 0x20
000000010000 0x10
000000001000 0x08
000000000100 0x04
000000000010 0x02
000000000001 0x01
